=========================
Notas de la Documentación
=========================

Cambiando a sphinx
==================

La documentación se generaba con epydoc y algunas extensiones especiales hasta cocos 0.5.5. Epydoc ya no tiene mantenimiento, y precisa
parches para funcionar con nuevas versiones de python y docutils, así que hacía falta el cambio hacia una librería actualizada.

Sphinx es el nuevo estándar de facto, así que la documentación usará sphinx.

Lineamientos para personalizar sphinx
=====================================

Mantén la personalización al mínimo para evitar la necesidad de mantenimiento cuando se modifica shinx.

Ayuda para algunas operaciones usuales en docstring
===================================================

Por favor utiliza sangría de cuatro espacios.

La tabulación suele generar errores, conviértela a espacios.

Texto literal inline: \`\`my_literal_text\`\` -> ``my_literal_text``.
(en la sintaxis de link ``~`` es un modificador que suprime las partes superiores en un nombre punteado).
 
Link a un módulo de cocos: ``:mod:`~cocos.cocosnode` ->`` :mod:`~cocos.cocosnode`

Link a un módulo de cocos: ``:mod:`cocos.cocosnode` ->`` :mod:`cocos.cocosnode`

Link a una clase: ``:class:`~cocos.cocosnode.CocosNode` ->`` :class:`~cocos.cocosnode.CocosNode`

Link a un método: ``:meth:`~cocos.cocosnode.CocosNode.add` ->``  :meth:`~cocos.cocosnode.CocosNode.add`

Link a un método:
``:meth:`CocosNode.add<cocos.cocosnode.CocosNode.add>` ->``  :meth:`CocosNode.add()<cocos.cocosnode.CocosNode.add>`

Link a una función: ``:func:`cocos.tiles.load` ->`` :func:`cocos.tiles.load`

.. Note::
    Si una clase, método, atributo o función existe en un proyecto de cocos,
    normalmente alcanza con anteponer un punto al nombre. Esto también vale para
    argumentos/parámetros.

    * link a una clase ``:class:`.CocosNode` ->`` :class:`.CocosNode`

Hay otras construcciones como por ejemplo:

* ``:data:`` -> Referencia a una variable de módulo.

* ``:const:`` -> Referencia a una constante. Esta puede ser una variable de Python que no deba modificarse.

* ``:attr:`` -> Referencia a un tipo de datos de un objeto.

* ``:exc:``  -> Referencia a una excepción. Se debería usar la notación de puntos.

* ``:obj:``  -> Referencia a un objeto sin tipo definido. Es útil por ejemplo como default_role.

Link a una sección o a cualquier punto dentro del documento:

    - Declarar una etiqueta en la ubicación de destino con ``.. _nombredeetiqueta:`` (el '_' no pertenece a la etiqueta)
    - Escribir el link como ``:ref:`TextoAMostrarEnElLink<nombredelaetiqueta>``` (incluyendo los corchetes)
    - Si el TextoAMostrarEnElLink se omite la ref debería preceder a una sección y el título de la sección se usará como el texto a mostrar en el link
    - nombredelaetiqueta debe ser la misma en todo el documento

Link a otro documento en el mismo build de sphinx:
    - ``:doc:`TextoAMostrarEnElLink<nombreDelDocumento>``` (incluyendo los corchetes)
    - ``:doc:`nombreDelDocumento``` (se mostrará el título del documento en el link)

Docstring para Funciones y Métodos
==================================

Utilizamos la extensión `Napoleon <http://www.sphinx-doc.org/en/stable/ext/napoleon.html>`_ de sphinx. Se usa el diseño de página de <http://google.github.io/styleguide/pyguide.html#Comments>`_. 
El docstring debería contener una sección para Argumentos (si los hubiera) y para el tipo de objeto devuelto si es otro que ``None``.


Ejemplos::

    def add(self, child, z=0, name=None):
        """Agregar el hijo y luego actualizar el foco del manager/viewport.

        Args:
            child (CocosNode): Nodo a agregar. Usualmente es un
                :class:`ScrollableLayer`.
            z (int) : índice z para este hijo.
            name (str) : El nombre de este hijo. [Opcional]
        """

::

    def pixel_to_screen(self, x, y):
        """Busca el píxel de la pantalla que se corresponde con el píxel del Layer.

        Vale para transformaciones de viewport, layer y pantalla.

        Argumentos:
            x (int): coordenada x en el espacio del Layer
            y (int): coordenada y en el espacio del Layer

        Devuelve:
            tuple[int, int]: coordenadas en el espacio de la pantalla
        """

Algunos lineamientos para la escritura de la documentación

* El contenido debería ser lo suficientemente preciso para que cualquiera pueda comprender qué hace una función, clase o método.
* No usar el lenguaje de etiquetas en la primera línea del docstring. Esa línea se muestra idéntica en los mensajes de autocomplete, así que el etiquetado se ve extraño.
* No linkear la clase A o la función f dentro de su mismo docstring. El lector ya está en el documento de la clase / función, y por lo tanto el link no agrega nada excepto ruido. Es correcto hacer links a una parte específica del documento, por ejemplo :method:...
* Utilizar tres comillas dobles para encerrar los docstring.
* Si una subclase hace pequeños cambios en métodos de la clase base, y los docstring de esos métodos son extensos, es preferible señalar únicamente los cambios y hacer una referencia a la clase base para mayor detalle.

