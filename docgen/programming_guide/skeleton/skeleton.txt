Animación con esqueletos
========================

.. contents::
    :local:
        
Los módulos skeleton proveen de una forma de tener animaciones 2d con esqueletos
en tu aplicación de cocos. La manera de trabajar con ellos puede llegar a ser
un poco complicada de configurar, pero luego su uso es muy sencillo, y hay
algunas herramientas que hacen el proceso más simple.

Para hacer animación con esqueletos en cocos deberás:

    - Crear un esqueleto
    - Crear uno o más figuras (skin)
    - Crear todas las animaciones que quieras


Luego, para utilizarlas tendrás que:

    - Cargar el esqueleto
    - Cargar la figura
    - Agregar un Skin, nodo de cocos a tu escena
    - Cargar las animaciones
    - Usar la acción Anim en el nodo Skin para reproducir las animaciones
    
Creando Esqueletos y Figuras
----------------------------

El archivo del esqueleto
^^^^^^^^^^^^^^^^^^^^^^^^

Los esqueletos se definen en archivos .py. Lo primero que debes hacer es crear
el hueso principal de tu esqueleto. Aquí creamos lo que va a ser el cuerpo de
tu esqueleto humano:

doc/programming_guide/skeleton/root_bone.py::

    from cocos.skeleton import Bone, Skeleton

    root_bone = Bone('body', 70, -180.0, (0.00, 0.00))
    
    skeleton = Skeleton(root_bone)

Esto se lee de esta forma: Crear un hueso con etiqueta 'body' que tenga 70
píxel de largo, que esté rotado -180 grados y que se ubique en (0,0). Rotamos
el hueso porque queremos poder mover sus hombros y no sus piernas, para que la
parte fija del esqueleto sea la cintura, o sea, el origen del hueso principal.

Puedes ver el esqueleto que has creado usando una pequeña pieza de código.

from doc/programming_guide/skeleton/show_root_bone.py::

    from cocos import skeleton
    
    # importar el esqueleto que hemos creado
    import root_bone

    class TestLayer(cocos.layer.Layer):
        def __init__(self):
            super( TestLayer, self ).__init__()
    
            x,y = director.get_window_size()
            
            # crear una figura para nuestro esqueleto
            self.skin = skeleton.ColorSkin(root_bone.skeleton, (255,0,0,255))
            
            # agregar la figura a la escena
            self.add( self.skin )
            x, y = director.get_window_size()
            self.skin.position = x/2, y/2

Se verá así:

.. figure:: show_root_bone.png

El nuevo concepto en juego aquí es la figura. Las figuras se encargan de
dibujar los esqueletos. Aquí usamos una figura básica, ColorSkin, que solo
dibuja una línea coloreada sobre el hueso. Una figura, como todo lo demás, no
es otra cosa que un cocosnode, por lo que puedes agregarla a tu nodo para
ubicarlo en la pantalla.

El archivo de la figura
^^^^^^^^^^^^^^^^^^^^^^^

Ahora, queremos darle una figura a este esqueleto con imágenes, así que creamos
un archivo de figura. El archivo de la figura se verá así:

doc/programming_guide/skeleton/root_skin.py::

    skin = [
        ('body', (25, 91), 'gil-cuerpo.png', True, True, 0.5),
      ]
      
Esto se lee: Esta figura tiene una imagen para el hueso con la etiqueta 'body',
y la imagen tiene una ubicación relativa de (25, 91) desde el origen del hueso,
el archivo de la imagen es 'gil-cuerpo.png' (viene con cocos), invertir la
imagen en el eje x, también en el eje y (recuerda que la hemos rotado en -180),
y cambiar el tamaño a la mitad.

Ahora podemos mostrar el esqueleto con la figura que acabamos de crear.

from doc/programming_guide/skeleton/show_root_skin.py::

    # importar el esqueleto que hemos creado
    import root_bone
    import root_skin
    
    class TestLayer(cocos.layer.Layer):
        def __init__(self):
            super( TestLayer, self ).__init__()
    
            x,y = director.get_window_size()
            
            # crear una figura ColorSkin para nuestro esqueleto
            self.skin = skeleton.BitmapSkin(root_bone.skeleton, root_skin.skin)
            
            # agregar la figura a la escena
            self.add( self.skin )
            x, y = director.get_window_size()
            self.skin.position = x/2, y/2
       
Esto se verá así:

.. figure:: show_root_skin.png

El editor de esqueletos
^^^^^^^^^^^^^^^^^^^^^^^

En este punto, podemos usar la primera herramienta con la que contamos, el
editor de esqueletos. Para iniciar el editor ejecutar el siguiente comando::
    
    tools$ python skeleton/skeleton_editor.py ../doc/programming_guide/skeleton/root_bone.py ../doc/programming_guide/skeleton/root_skin.py
    
Esto se verá así:

.. figure:: root_editor.png

Ahí puede verse la parte de la figura de tu esqueleto y muchos otros puntos
de control. Los puntos de control se pueden arrastrar. Si un punto de control
está sobre otro punto de control, puedes cambiar tu selección usando la ruedita
del mouse. El punto de control seleccionado está levemente resaltado.

En este ejemplo se puede ver el punto de control rojo, que controla la rotación
del hueso, los dos puntos de control azules, que controlan la posición de del
hueso y la parte de la figura, y el punto de control verde (detrás de uno de
los azules) que controla la posición del esqueleto.

Al presionar 's' se guardarán los cambios que hayas hecho al esqueleto y al
archivo de la figura. Esto hara que se sobreescriban los archivos .py, por lo
tanto ten cuidado de poner solo datos de esqueleto y figura en estos archivos.

Esta es una herramienta útil para crear tus figuras, ya que la única forma de
saber las verdaderas posiciones relativas entre las partes de tu esqueleto y
la imagen que ha creado el artista es visualmente.

Ahora agregamos más huesos y partes de la figura al esqueleto. Los huesos, a
excepción del hueso principal, están ligados a otros huesos y sus posiciones
y rotaciones son relativas a las del hueso padre.

doc/programming_guide/skeleton/body_and_arm.py::

    from cocos.skeleton import Bone, Skeleton
    
    def Point2(*args): return args
    
    root_bone = Bone('body', 70, -180.0, Point2(0, 0)).add(
        Bone('upper_arm', 30, 120, (0, -70)).add(
            Bone('lower_arm', 30, 30, (0, -30))
        )
    )
    
    skeleton = Skeleton(root_bone)

Aquí aprovechamos que la función 'add' devuelve el hueso padre, para que de
esta manera puedas hacer llamadas sucesivas a add y tengas un espaciado que
asemeje la esctructura jerárquica del esqueleto.

La parte superior del brazo tiene 30 píxel de largo y se ubica al final del
cuerpo, declarando una posición relativa de -70 píxel. El antebrazo también
mide 30 píxel y también está ubicado al final de su padre, la parte superior
del brazo. El largo del hueso no afecta las transformaciones o la ubicación
de otros huesos, pero es útil echar un vistazo a lo que se está haciendo.

El esqueleto que acabamos de crear se ve así:

.. figure:: body_and_arm.png

Ahora agregamos la figura. No nos importan las posiciones o la orientación, ya
que cambiaremos esos parámetros cuando los veamos.

doc/programming_guide/skeleton/body_and_arm_skin.py::

    skin = [
        ('body', (25, 91), 'gil-cuerpo.png', True, True, 0.5),
        ('lower_arm', (0, 0), 'gil-mano2.png', False, False, 0.5),
        ('upper_arm', (0, 0), 'gil-brazo1.png', False, False, 0.5),
      ]

El lío que acabamos de hacer se verá de esta forma:

.. figure:: body_and_arm_skin_pre.png

Ahora tenemos que usar el editor para arrastrar las partes hasta que quede
de esta manera:

.. figure:: body_and_arm_skin_final.png

CUIDADO: Cuando se mueven los puntos de control, las cosas no se ven bien. Esto
es porque solo estás aplicando una traslación al punto. Pero luego la
traslación se aplica al punto transformado. Parece extraño, pero uno se
acostumbra luego de usar la herramienta por un tiempo. Y en caso de que no te
acostumbres, puedes enviarnos un parche.

Es importante que se muevan los huesos, no solo las figuras, de forma que el
hombro y el codo se muevan al lugar adecuado. Puedes probar esto rotando los
huesos y asegurandote de que las imágenes se vean bien en todas las posiciones.

Y al finalizar presiona la tecla 's' para guardar.

Deberías seguir de ese modo hasta que tengas el esqueleto y la figura totalmente
definidos.

Puedes ver y usar el esqueleto de ejemplo y la figura que vienen en el directorio test::

    tools$ python view_skeleton.py ../test/sample_skeleton.py
    
    tools/skeleton$ python skeleton_editor.py ../../test/sample_skeleton.py ../../test/sample_skin.py
    
Animaciones
-----------

Ahora que tienes tus esqueletos, es tiempo de animarlos. Una animación tiene una
lista de cuadros principales (keyframe), es decir, lo que indica las distintas poses
y su tiempo. Cuando reproduces una animación, cocos modificará el esqueleto según
el tiempo transcurrido, interpolando entre el cuadro anterior y el siguiente.


El editor de animaciones
^^^^^^^^^^^^^^^^^^^^^^^^

Activa el editor de animaciónes con el siguiente comando::

    tools/skeleton$ python animator.py ../../test/sample_skeleton.py --skin ../../test/sample_skin.py ../../test/SAMPLE.anim 

.. figure:: animator.png

En la parte superior se puede ver la línea de tiempo con los cuadros principales
en azul y la posición actual resaltada con amarillo.

Además se puede ver el primer cuadro principal, con su figura y puntos de control.

Puedes controlar el editor con las siguientes teclas:

 - *S*: Guardar el estado actual del editor
 - *IZQUIERDA*: Correr el tiempo $TICK_DELTA a la izquierda
 - *DERECHA*: Correr el tiempo $TICK_DELTA a la derecha
 - *MÁS*: Agregar un cuadro principal a la posición actual
 - *MENOS*: Eliminar el cuadro principal en la posición actual
 - *AV PÁG*: Ir al cuadro principal anterior
 - *RE PÁG*: Ir al cuadro principal siguiente
 - *INSERT*: Insertar el tiempo $TICK_DELTA en la posición actual
 - *SUPR*: Eliminar el tiempo $TICK_DELTA en la posición actual
 - *INICIO*: Ir al comienzo de la animación
 - *FIN*: Ir al final de la animación
 - *ESPACIO*: Reproducir la animación

Cuando se está sobre un cuadro principal se puden ver algunos puntos de control
que pueden moverse para modificarlo.

$TICK_DELTA es 1/16 de segundo.

Reproduciendo animaciones
^^^^^^^^^^^^^^^^^^^^^^^^^

Puedes reproducir una animación de una figura haciendo:

from test/test_skeleton_anim.py::

    class TestLayer(cocos.layer.Layer):
        def __init__(self):
            super( TestLayer, self ).__init__()
    
            x,y = director.get_window_size()
            self.skin = skeleton.BitmapSkin(sample_skeleton.skeleton, sample_skin.skin)
            self.add( self.skin )
            x, y = director.get_window_size()
            self.skin.position = x/2, y/2
            anim = cPickle.load(open("SAMPLE.anim"))
            self.skin.do( cocos.actions.Repeat( skeleton.Animate(anim) ) )
            
La acción Animate tiene los siguientes parámetros: recenter, recenter_x, recenter_y.
Esto controla la forma en que la posición del esqueleto se mueve. Si corres dos animaciones
de caminar hacia la izquierda sin la opción de traslación verás al jugador moverse hacia la izquierda,
ir al origen e ir hacia la izquierda de nuevo. Si usas la opción de traslación, el jugador solo irá hacia
la izquierda y se desplazará el doble de distancia.ç

Además, las animaciones se pueden invertir, haciendo que el personaje se oriente hacia el lado opuesto.

